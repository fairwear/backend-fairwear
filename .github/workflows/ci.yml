name: backend continuous integration

permissions:
  id-token: write
  contents: read

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]
    workflow_dispatch:
      
env:
  REMOTE_PORT: 9882
  REMOTE_USERNAME: ${{ secrets.REMOTE_USERNAME }}
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  POSTGRES_DB: fairwear-ci

      
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      actions-db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD:  postgres
          POSTGRES_DB: fairwear-ci
        ports:
          - 5432:5432

    steps:
      - name: Check out source code
        uses: actions/checkout@v3

      - name: Set up Node 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      - name: Check code formatting w/ Prettier
        run: npx prettier --check .

      - name: Install dependencies
        run: npm ci
      
      - name: Run build
        run: npm run build

      - name: Clean and migrate the db
        run: npx prisma migrate reset --force
        env:
          DATABASE_URL: postgresql://${{env.POSTGRES_USER}}:${{env.POSTGRES_PASSWORD}}@${{env.POSTGRES_HOST}}:${{env.POSTGRES_PORT}}/${{env.POSTGRES_DB}}

      - name: Run tests w/ Jest
        run: npm run test
        env:
          DATABASE_URL: postgresql://${{env.POSTGRES_USER}}:${{env.POSTGRES_PASSWORD}}@${{env.POSTGRES_HOST}}:${{env.POSTGRES_PORT}}/${{env.POSTGRES_DB}}


  deploy:
    # if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Checkout out source code
        uses: actions/checkout@v3

      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}


      - name: Try to build and publish docker image
        run: |
          sh publish.sh

      - name: Create SSH key
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts

      - uses: Burnett01/rsync-deployments@5.2
        name: Add start.sh script to remote
        with:
          switches: -av --progress
          path: start.sh
          remote_path: ~/start.sh
          remote_host: ${{env.REMOTE_HOST}}
          remote_user: ${{env.REMOTE_USERNAME}}
          remote_key: ${{env.SSH_PRIVATE_KEY}}


      - uses: Burnett01/rsync-deployments@5.2
        name: Add docker-compose.yml to remote
        with:
          switches: -av --progress
          path: docker-compose.yml
          remote_path: ~/docker-compose.yml
          remote_host: ${{env.REMOTE_HOST}}
          remote_user: ${{env.REMOTE_USERNAME}}
          remote_key: ${{env.SSH_PRIVATE_KEY}}

      - name: Rebuild and start docker containers 
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.REMOTE_HOST}}
          username: ${{env.REMOTE_USERNAME}}
          port: ${{env.REMOTE_PORT}}
          key: ${{env.SSH_PRIVATE_KEY}}
          script_stop: true
          script: |
            sh start.sh    