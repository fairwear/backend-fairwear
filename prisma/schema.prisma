generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  output   = "./generated/prisma-class-generator"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./generated/erd/graffinity_erd.pdf"
//   theme    = "forest"
// }

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "./generated/dto/nestjs-dto"
//   outputToNestJsResourceStructure = "false"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "false"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = ""
//   fileNamingStyle                 = "camel"
// }

// ------------------------------------ ENUMS ------------------------------------

enum RoleEnum {
  USER
  ADMIN

  @@map("role_enum")
}

enum ReportStatusEnum {
  SUBMITTED
  PENDING
  RESOLVED

  @@map("report_status_enum")
}

enum ReportResultEnum {
  DELETED
  EDITED
  DISREGARDED

  @@map("report_result_enum")
}

enum VoteEnum {
  UPVOTE
  DOWNVOTE

  @@map("vote_enum")
}

// ------------------------------------ MAIN ENTITIES ------------------------------------

model User {
  // ------ Fields ------
  id              Int              @unique @default(autoincrement()) @db.Integer
  username        String           @unique
  password        String
  email           String           @unique
  name            String
  surname         String
  refreshToken    String?          @map("refresh_token")
  userTrustScore  Float            @default(0.5) @map("user_trust_score")
  // ------ Timestamps ------
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  // ------ Relationships ------
  roles           UserRoleToUser[]
  filedReports    Report[]         @relation("author")
  resolvedReports Report[]         @relation("resolved_by")
  prefferedTopics UserToTopic[]
  items           Item[]
  savedBrands     UserToBrand[]
  posts           BrandPost[]
  votes           BrandPostVote[]
  createdBrands   Brand[]
  Email           Email[]

  @@map("user")
}

model Topic {
  // ------ Fields ------
  id              Int                @id @default(autoincrement()) @db.Integer
  name            String             @unique
  topicId         Int?               @unique @map("topic_id")
  // ------ Timestamps ------
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime?          @updatedAt @map("updated_at")
  deletedAt       DateTime?          @map("deleted_at")
  // ------ Relationships ------
  topic           Topic?             @relation("TopicSubtopic", fields: [topicId], references: [id])
  subtopic        Topic[]            @relation("TopicSubtopic")
  posts           BrandPostToTopic[]
  brands          TopicToBrand[]
  userPreferences UserToTopic[]

  @@map("topic")
}

model UserRole {
  // ------ Fields ------
  id    Int              @id @default(autoincrement()) @db.Integer
  name  RoleEnum         @unique @default(USER)
  // ------ Relationships ------
  users UserRoleToUser[]

  @@map("user_to_role")
}

model Item {
  // ------ Fields ------
  id        Int               @id @default(autoincrement()) @db.Integer
  name      String            @unique
  userId    Int               @map("user_id")
  brandId   Int               @map("brand_id")
  imageUrl  String?           @map("image_url")
  barcode   String?           @unique
  // ------ Timestamps ------
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime?         @updatedAt @map("updated_at")
  deletedAt DateTime?         @map("deleted_at")
  // ------ Relationships ------
  brand     Brand             @relation(fields: [brandId], references: [id])
  posts     BrandPostToItem[]
  createdBy User              @relation(fields: [userId], references: [id])

  @@map("item")
}

model Brand {
  // ------ Fields ------
  id           Int            @id @default(autoincrement()) @db.Integer
  name         String         @unique
  userId       Int            @map("user_id")
  imageUrl     String?        @map("image_url")
  // ------ Timestamps ------
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime?      @updatedAt @map("updated_at")
  deletedAt    DateTime?      @map("deleted_at")
  // ------ Relationships ------
  items        Item[]
  savedByUsers UserToBrand[]
  posts        BrandPost[]
  topics       TopicToBrand[]
  createdBy    User           @relation(fields: [userId], references: [id])

  @@map("brand")
}

model Report {
  // ------ Fields ------
  id           Int               @unique @default(autoincrement()) @db.Integer
  reportReason String            @map("report_reason")
  status       ReportStatusEnum  @default(SUBMITTED)
  comment      String?
  reportResult ReportResultEnum? @map("report_result")
  postId       Int               @map("post_id")
  resolvedById Int?              @map("resolved_by_id")
  authorId     Int               @map("author_id")
  // ------ Timestamps  ------
  createdAt    DateTime          @default(now()) @map("created_at")
  resolvedAt   DateTime?         @map("resolved_at")
  // ------ Relationships ------
  author       User              @relation(name: "author", fields: [authorId], references: [id])
  post         BrandPost         @relation(fields: [postId], references: [id])
  resolvedBy   User?             @relation(name: "resolved_by", fields: [resolvedById], references: [id])

  @@unique([postId, authorId])
  @@map("report")
}

model BrandPost {
  // ------ Fields ------
  id           Int                  @id @default(autoincrement()) @db.Integer
  title        String
  body         String               @unique
  brandId      Int                  @map("brand_id")
  authorId     Int                  @map("author_id")
  postScore    Float                @default(0) @map("post_score")
  // ------ Timestamps ------
  createdAt    DateTime             @default(now()) @map("created_at")
  deletedAt    DateTime?            @map("deleted_at")
  // ------ Relationships ------
  brand        Brand                @relation(fields: [brandId], references: [id])
  author       User                 @relation(fields: [authorId], references: [id])
  votes        BrandPostVote[]
  topics       BrandPostToTopic[]
  relatedItems BrandPostToItem[]
  reports      Report[]
  references   BrandPostReference[]

  @@map("brand_post")
}

model BrandPostReference {
  // ------ Fields ------
  id        Int       @id @default(autoincrement()) @db.Integer
  title     String
  postId    Int       @map("post_id")
  body      String?
  sourceUrl String?   @map("source_url")
  // ------ Timestamps ------
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  // ------ Relationships ------
  post      BrandPost @relation(fields: [postId], references: [id])

  @@map("brand_post_reference")
}

model EmailTemplate {
  // ------ Fields ------
  id        Int       @id @default(autoincrement()) @db.Integer
  name      String    @unique
  subject   String
  body      String
  // ------ Timestamps ------
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("email_template")
}

model Email {
  // ------ Fields ------
  id        Int       @id @default(autoincrement()) @db.Integer
  subject   String
  body      String
  status    String
  userId    Int
  // ------ Timestamps ------
  dateSent  DateTime? @map("date_sent")
  createdAt DateTime  @default(now()) @map("created_at")
  // ------ Relationships ------
  user      User      @relation(fields: [userId], references: [id])

  @@map("email")
}

// ------------------------------------ MANY TO MANY RELATIONS ------------------------------------

model UserToBrand {
  listName String @unique @map("list_name")
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @map("user_id")
  brand    Brand  @relation(fields: [brandId], references: [id])
  brandId  Int    @map("brand_id")

  @@unique([userId, brandId])
  @@map("user_to_brand")
}

model TopicToBrand {
  topic   Topic @relation(fields: [topicId], references: [id])
  topicId Int   @map("topic_id")
  brand   Brand @relation(fields: [brandId], references: [id])
  brandId Int   @map("brand_id")

  @@unique([topicId, brandId])
  @@map("topic_to_brand")
}

model UserToTopic {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int   @map("user_id")
  topic   Topic @relation(fields: [topicId], references: [id])
  topicId Int   @map("topic_id")

  @@unique([userId, topicId])
  @@map("user_to_topic")
}

model UserRoleToUser {
  user   User     @relation(fields: [userId], references: [id])
  userId Int      @map("user_id")
  roles  UserRole @relation(fields: [roleId], references: [id])
  roleId Int      @map("role_id")

  @@unique([userId, roleId])
  @@map("role_to_user")
}

model BrandPostVote {
  vote      VoteEnum
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @map("user_id")
  post      BrandPost @relation(fields: [postId], references: [id])
  postId    Int       @map("post_id")

  @@unique([userId, postId])
  @@map("brand_post_vote")
}

model BrandPostToTopic {
  isBad   Boolean   @default(false) @map("is_bad")
  post    BrandPost @relation(fields: [postId], references: [id])
  postId  Int       @map("post_id")
  topic   Topic     @relation(fields: [topicId], references: [id])
  topicId Int       @map("topic_id")

  @@unique([postId, topicId])
  @@map("brand_post_to_topic")
}

model BrandPostToItem {
  post   BrandPost @relation(fields: [postId], references: [id])
  postId Int       @map("post_id")
  item   Item      @relation(fields: [itemId], references: [id])
  itemId Int       @map("item_id")

  @@unique([postId, itemId])
  @@map("brand_post_to_item")
}

// ------------------------------------ END ------------------------------------
