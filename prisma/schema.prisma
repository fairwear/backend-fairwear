// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
<<<<<<< HEAD

model Topic {
  id        Int           @id @default(autoincrement()) @db.Integer
  name      String        @unique
  subtopics Subtopic[]
  items     ItemToTopic[]
  TopicToBrand TopicToBrand[]
}

model Subtopic {
  id      Int    @id @default(autoincrement()) @db.Integer
  name    String @unique
  topic   Topic  @relation(fields: [topicId], references: [id])
  topicId Int    @map("topic_id")
}

model Item {
  id    Int    @id @default(autoincrement()) @db.Integer
  name  String @unique
  score String
  brandId Int @map("brand_id")
  brand Brand @relation(fields: [brandId], references: [id])
  topics ItemToTopic[]
}

model ItemToTopic {
  item    Item  @relation(fields: [itemId], references: [id])
  itemId  Int   @map("item_id")
  topic   Topic @relation(fields: [topicId], references: [id])
  topicId Int   @map("topic_id")

  @@unique([itemId, topicId])
  @@map("item_to_topic")
}

model Brand {
  id     Int            @id @default(autoincrement()) @db.Integer
  name   String         @unique
  topics TopicToBrand[]
  items Item[]
  //reports Report[]
}

model TopicToBrand {
  topic   Topic @relation(fields: [topicId], references: [id])
  topicId Int   @map("topic_id")
  brand   Brand @relation(fields: [brandId], references: [id])
  brandId Int   @map("brand_id")

  @@unique([topicId, brandId])
  @@map("topic_to_brand")
}

// model UserToItem {
//   user User @relation(fields: [userId], references: [id])
//   userId @map("user_id")
//   item    Item  @relation(fields: [itemId], references: [id])
//   itemId  Int   @map("item_id")
// listName String @unique
// }

// model UserToTopic {
//   user User @relation(fields: [userId], references: [id])
//   userId @map("user_id")
//   topic   Topic @relation(fields: [topicId], references: [id])
//   topicId Int   @map("topic_id")
// }
=======
model User{
  id          Int      @unique @default(autoincrement()) @db.Integer
  username    String   @unique
  password    String 
  email       String   @unique
  role        UserRole @default(User)
  name        String
  surname     String
  filesReport Report[]
  @@map("user")  
}
enum UserRole{
  User
  Admin 
  @@map("userrole")
}
model Report{
  id           Int @unique @default(autoincrement()) @db.Integer
  createdAt    DateTime @default(now()) @map("created_at")
  author       User @relation(fields: [authorId], references: [id])
  authorId     Int @unique @map("author_id")
  reportReason String @map("report_reason")
  comment      String
  status       Status @default(Submited)
  @@map("report")
}
enum Status{
  Submited
  Seen
  Resolved
  @@map("status")
}
>>>>>>> 066a81f3025c13c16d3533dcb33997f0b3710a01
