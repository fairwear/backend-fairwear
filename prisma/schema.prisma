// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  output   = "./generated/prisma-class-generator"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./generated/erd/graffinity_erd.pdf"
//   theme    = "forest"
// }

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "./generated/dto/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

model EmailTemplate {
  id        Int       @id @default(autoincrement()) @db.Integer
  name      String    @unique
  subject   String
  body      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("email_template")
}

model Email {
  id        Int       @id @default(autoincrement()) @db.Integer
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  subject   String
  body      String
  status    String
  dateSent  DateTime? @map("date_sent")
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("email")
}

model Topic {
  id          Int           @id @default(autoincrement()) @db.Integer
  name        String        @unique
  UserToTopic UserToTopic[]
  topicId     Int           @unique @map("topic_id")
  topic       Topic         @relation("TopicSubtopic", fields: [topicId], references: [id])
  subtopic    Topic[]       @relation("TopicSubtopic")
}

model Item {
  id      Int    @id @default(autoincrement()) @db.Integer
  name    String @unique
  brandId Int    @map("brand_id")
  brand   Brand  @relation(fields: [brandId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  userId  Int    @map("user_id")
}

model Brand {
  id          Int           @id @default(autoincrement()) @db.Integer
  name        String        @unique
  items       Item[]
  UserToBrand UserToBrand[]
}

model UserToBrand {
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @map("user_id")
  brand     Brand   @relation(fields: [brandId], references: [id])
  brandId   Int    @map("brand_id")
  listName String @unique @map("list_name")

  @@unique([userId, brandId])
  @@map("user_to_brand")
}

model UserToTopic {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int   @map("user_id")
  topic   Topic @relation(fields: [topicId], references: [id])
  topicId Int   @map("topic_id")

  @@unique([userId, topicId])
  @@map("user_to_topic")
}

model User {
  id          Int           @unique @default(autoincrement()) @db.Integer
  username    String        @unique
  password    String
  email       String        @unique
  name        String
  surname     String
  roles       RoleToUser[]
  filesReport Report[]
  UserToTopic UserToTopic[]
  items       Item[]
  brands     UserToBrand[]
  Email       Email[]

  @@map("user")
}

enum RoleEnum {
  USER
  ADMIN

  @@map("role_enum")
}

model UserRole {
  id    Int          @id @default(autoincrement()) @db.Integer
  name  RoleEnum     @unique @default(USER)
  users RoleToUser[]

  @@map("user_to_role")
}

model RoleToUser {
  user   User     @relation(fields: [userId], references: [id])
  userId Int      @map("user_id")
  roles  UserRole @relation(fields: [roleId], references: [id])
  roleId Int      @map("role_id")

  @@unique([userId, roleId])
  @@map("role_to_user")
}

model Report {
  id           Int              @unique @default(autoincrement()) @db.Integer
  createdAt    DateTime         @default(now()) @map("created_at")
  author       User             @relation(fields: [authorId], references: [id])
  authorId     Int              @unique @map("author_id")
  reportReason String           @map("report_reason")
  comment      String?
  status       ReportStatusEnum @default(SUBMITTED)

  @@map("report")
}

enum ReportStatusEnum {
  SUBMITTED
  PENDING
  RESOLVED

  @@map("report_status_enum")
}
