// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prismaClassGenerator {
    provider = "prisma-class-generator"
    output = "./generated/prisma-class-generator"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./data/diagram/graffinity_erd.pdf"
//   theme    = "forest"
// }

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../src/generated/nestjs-dto"
//   outputToNestJsResourceStructure = "false"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "false"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = ""
//   fileNamingStyle                 = "camel"
// }

model EmailTemplate {
  id        Int       @id @default(autoincrement()) @db.Integer
  name      String    @unique
  subject   String
  body      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("email_template")
}

model Email {
  id        Int       @id @default(autoincrement()) @db.Integer
  // user        User      @relation(fields: [userId], references: [id])
  // userId      Int
  subject   String
  body      String
  status    String
  dateSent  DateTime? @map("date_sent")
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("email")
}

// model UserToItem {
//   id        Int       @id @default(autoincrement()) @db.Integer
//   user      User      @relation(fields: [userId], references: [id])
//   userId    Int
//   item      Item      @relation(fields: [itemId], references: [id])
//   itemId    Int
//   createdAt DateTime  @default(now()) @map("created_at")
//   updatedAt DateTime? @updatedAt @map("updated_at")
//   deletedAt DateTime? @map("deleted_at")

//   @@map("user_to_item")
// }
